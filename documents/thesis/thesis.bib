@inproceedings{dolan2018concurrent,
  title        = {Concurrent system programming with effect handlers},
  author       = {Dolan, Stephen and Eliopoulos, Spiros and Hillerstr{\"o}m, Daniel and Madhavapeddy, Anil and Sivaramakrishnan, KC and White, Leo},
  booktitle    = {Trends in Functional Programming: 18th International Symposium, TFP 2017, Canterbury, UK, June 19-21, 2017, Revised Selected Papers 18},
  pages        = {98--117},
  year         = {2018},
  organization = {Springer}
}

@article{de2021separation,
  title     = {A separation logic for effect handlers},
  author    = {de Vilhena, Paulo Em{\'\i}lio and Pottier, Fran{\c{c}}ois},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {5},
  number    = {POPL},
  pages     = {1--28},
  year      = {2021},
  publisher = {ACM New York, NY, USA}
}

@phdthesis{de2022proof,
  title  = {Proof of Programs with Effect Handlers},
  author = {De Vilhena, Paulo},
  year   = {2022},
  school = {Universit{\'e} Paris Cit{\'e}}
}

@article{koval2023cqs,
  title     = {CQS: A Formally-Verified Framework for Fair and Abortable Synchronization},
  author    = {Koval, Nikita and Khalanskiy, Dmitry and Alistarh, Dan},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {7},
  number    = {PLDI},
  pages     = {244--266},
  year      = {2023},
  publisher = {ACM New York, NY, USA}
}

@article{bizjak2019iron,
  title     = {Iron: Managing obligations in higher-order concurrent separation logic},
  author    = {Bizjak, Ale{\v{s}} and Gratzer, Daniel and Krebbers, Robbert and Birkedal, Lars},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {3},
  number    = {POPL},
  pages     = {1--30},
  year      = {2019},
  publisher = {ACM New York, NY, USA}
}

@techreport{koka,
  title       = {Algebraic effects for functional programming},
  author      = {Leijen, Daan},
  year        = {2016},
  institution = {Technical Report. MSR-TR-2016-29. Microsoft Research technical report}
}

@article{plotkin2013handling,
  title     = {Handling algebraic effects},
  author    = {Plotkin, Gordon D and Pretnar, Matija},
  journal   = {Logical methods in computer science},
  volume    = {9},
  year      = {2013},
  publisher = {Episciences. org}
}

@article{eff,
  title     = {Programming with algebraic effects and handlers},
  author    = {Bauer, Andrej and Pretnar, Matija},
  journal   = {Journal of logical and algebraic methods in programming},
  volume    = {84},
  number    = {1},
  pages     = {108--123},
  year      = {2015},
  publisher = {Elsevier}
}

@article{jung2018iris,
  title     = {Iris from the ground up: A modular foundation for higher-order concurrent separation logic},
  author    = {Jung, Ralf and Krebbers, Robbert and Jourdan, Jacques-Henri and Bizjak, Ale{\v{s}} and Birkedal, Lars and Dreyer, Derek},
  journal   = {Journal of Functional Programming},
  volume    = {28},
  pages     = {e20},
  year      = {2018},
  publisher = {Cambridge University Press}
}

@inproceedings{ocamleff,
  title     = {Retrofitting effect handlers onto OCaml},
  author    = {Sivaramakrishnan, KC and Dolan, Stephen and White, Leo and Kelly, Tom and Jaffer, Sadiq and Madhavapeddy, Anil},
  booktitle = {Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
  pages     = {206--221},
  year      = {2021}
}

@inproceedings{leijen2017structured,
  title     = {Structured asynchrony with algebraic effects},
  author    = {Leijen, Daan},
  booktitle = {Proceedings of the 2nd ACM SIGPLAN International Workshop on Type-Driven Development},
  pages     = {16--29},
  year      = {2017}
}

@article{andecomposing,
  title        = {Composing Schedulers using Effect Handlers},
  author       = {Ande, Deepali and Sivaramakrishnan, KC},
  howpublished = {\url{https://kcsrk.info/papers/compose_ocaml22.pdf}},
  note         = {Accessed: 2024-04-04}
}

@misc{Picos,
  title        = {Picos -- Interoperable effects based concurrency},
  howpublished = {\url{https://github.com/ocaml-multicore/picos/}},
  note         = {Accessed: 2024-04-04}
}

@misc{tangeff,
  title        = {Session-Types Effect Handlers},
  howpublished = {POPL24 Student Research Comptetition, \url{https://github.com/ocaml-multicore/picos/}},
  note         = {Accessed: 2024-04-04}
}

@article{sestypes,
  author     = {H\"{u}ttel, Hans and Lanese, Ivan and Vasconcelos, Vasco T. and Caires, Lu\'{\i}s and Carbone, Marco and Deni\'{e}lou, Pierre-Malo and Mostrous, Dimitris and Padovani, Luca and Ravara, Ant\'{o}nio and Tuosto, Emilio and Vieira, Hugo Torres and Zavattaro, Gianluigi},
  title      = {Foundations of Session Types and Behavioural Contracts},
  year       = {2016},
  issue_date = {March 2017},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {49},
  number     = {1},
  issn       = {0360-0300},
  url        = {https://doi.org/10.1145/2873052},
  doi        = {10.1145/2873052},
  abstract   = {Behavioural type systems, usually associated to concurrent or distributed computations, encompass concepts such as interfaces, communication protocols, and contracts, in addition to the traditional input/output operations. The behavioural type of a software component specifies its expected patterns of interaction using expressive type languages, so types can be used to determine automatically whether the component interacts correctly with other components. Two related important notions of behavioural types are those of session types and behavioural contracts. This article surveys the main accomplishments of the last 20 years within these two approaches.},
  journal    = {ACM Comput. Surv.},
  month      = {apr},
  articleno  = {3},
  numpages   = {36},
  keywords   = {Behavioural types}
}